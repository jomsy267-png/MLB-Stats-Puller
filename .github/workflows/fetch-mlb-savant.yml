# Fetch recent Statcast events (all players), then derive pitcher & batter TEAM metrics.
# No player IDs required. Produces:
# - data/mlb_savant/statcast_YYYY-MM-DD_to_YYYY-MM-DD.csv  (raw)
# - data/mlb_savant/latest_pitch_data.csv                  (trimmed)
# - data/mlb_savant/pitcher_quality.csv                    (per-pitcher rates)
# - data/mlb_savant/team_batter_quality.csv                (team batting quality, last N days)
# - data/mlb_savant/team_pitching_allowed.csv              (team pitching allowed quality, last N days)

from datetime import date, timedelta
import os
import pandas as pd
from pybaseball import statcast  # all events over a window

DAYS = int(os.getenv("DAYS", "7"))                    # lookback window
OUT_DIR = os.getenv("OUT_DIR", "data/mlb_savant")

def main():
    start = (date.today() - timedelta(days=DAYS)).strftime("%Y-%m-%d")
    end   = date.today().strftime("%Y-%m-%d")
    print(f"Fetching Statcast data from {start} to {end}")

    df = statcast(start_dt=start, end_dt=end)         # pitch-by-pitch + batted ball events
    if df is None or len(df) == 0:
        raise SystemExit("No data returned from statcast(). Try widening the date window.")

    os.makedirs(OUT_DIR, exist_ok=True)
    raw_path = f"{OUT_DIR}/statcast_{start}_to_{end}.csv"
    df.to_csv(raw_path, index=False)
    print(f"✅ Raw saved -> {raw_path} ({len(df)} rows)")

    # Keep core columns (guard in case some are missing)
    keep_cols = [
        "pitcher","player_name","game_date","home_team","away_team","inning_topbot",
        "release_speed","launch_speed","launch_angle","events","description"
    ]
    df_trim = df[[c for c in keep_cols if c in df.columns]].copy()
    trim_path = f"{OUT_DIR}/latest_pitch_data.csv"
    df_trim.to_csv(trim_path, index=False)
    print(f"✅ Trim saved -> {trim_path} ({len(df_trim)} rows)")

    # --- Feature flags ---
    if "launch_speed" in df_trim and "launch_angle" in df_trim:
        df_trim["barrel_flag"] = ((df_trim["launch_speed"] >= 98) &
                                  (df_trim["launch_angle"].between(26, 30))).astype(int)
        df_trim["hard_hit"] = (df_trim["launch_speed"] >= 95).astype(int)
    else:
        df_trim["barrel_flag"] = 0
        df_trim["hard_hit"] = 0

    # --- Per-pitcher quality (allowed) ---
    if "pitcher" in df_trim.columns:
        agg_pitcher = (df_trim.groupby("pitcher")[["barrel_flag","hard_hit"]]
                             .mean()
                             .rename(columns={"barrel_flag":"barrel_rate","hard_hit":"hard_hit_rate"})
                             .reset_index())
        agg_pitcher.to_csv(f"{OUT_DIR}/pitcher_quality.csv", index=False)
        print(f"✅ Aggregates -> {OUT_DIR}/pitcher_quality.csv ({len(agg_pitcher)} pitchers)")

    # --- TEAM metrics ---
    # Who is batting / pitching team on each play
    def batting_team(row):
        if row.get("inning_topbot") == "Top":
            return row.get("away_team")
        return row.get("home_team")

    def pitching_team(row):
        # Opposite of batting_team
        if row.get("inning_topbot") == "Top":
            return row.get("home_team")
        return row.get("away_team")

    if {"home_team","away_team","inning_topbot"}.issubset(df_trim.columns):
        df_trim["bat_team"] = df_trim.apply(batting_team, axis=1)
        df_trim["pitch_team"] = df_trim.apply(pitching_team, axis=1)

        # Team batting quality (what hitters produced)
        bat_cols = ["barrel_flag","hard_hit"]
        bat_present = [c for c in bat_cols if c in df_trim.columns]
        if bat_present:
            team_bat = (df_trim.groupby("bat_team")[bat_present]
                               .mean()
                               .rename(columns={"barrel_flag":"bat_barrel_rate",
                                                "hard_hit":"bat_hard_hit_rate"})
                               .reset_index()
                               .rename(columns={"bat_team":"team"}))
            team_bat.to_csv(f"{OUT_DIR}/team_batter_quality.csv", index=False)
            print(f"✅ Team batting -> {OUT_DIR}/team_batter_quality.csv ({len(team_bat)} teams)")

        # Team pitching allowed (what they allowed)
        pit_present = [c for c in bat_cols if c in df_trim.columns]
        if pit_present:
            team_pit = (df_trim.groupby("pitch_team")[pit_present]
                               .mean()
                               .rename(columns={"barrel_flag":"pit_barrels_allowed_rate",
                                                "hard_hit":"pit_hard_hit_allowed_rate"})
                               .reset_index()
                               .rename(columns={"pitch_team":"team"}))
            team_pit.to_csv(f"{OUT_DIR}/team_pitching_allowed.csv", index=False)
            print(f"✅ Team pitching -> {OUT_DIR}/team_pitching_allowed.csv ({len(team_pit)} teams)")

if __name__ == "__main__":
    main()
